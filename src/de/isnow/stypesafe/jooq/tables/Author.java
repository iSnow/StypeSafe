/**
 * This class is generated by jOOQ
 */
package de.isnow.stypesafe.jooq.tables;

import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.UpdatableTableImpl;
import org.jooq.tools.unsigned.UInteger;

import de.isnow.stypesafe.jooq.Keys;
import de.isnow.stypesafe.jooq.Stypesafe;
import de.isnow.stypesafe.jooq.tables.records.AuthorRecord;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.4.2"},
                            comments = "This class is generated by jOOQ")
public class Author extends UpdatableTableImpl<AuthorRecord> {

	private static final long serialVersionUID = -896221368;

	/**
	 * The singleton instance of stypesafe.author
	 */
	public static final Author AUTHOR = new Author();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AuthorRecord> getRecordType() {
		return AuthorRecord.class;
	}

	/**
	 * The table column <code>stypesafe.author.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public final TableField<AuthorRecord, UInteger> ID = createField("id", SQLDataType.INTEGERUNSIGNED, this);

	/**
	 * The table column <code>stypesafe.author.stypiuid</code>
	 */
	public final TableField<AuthorRecord, String> STYPIUID = createField("stypiuid", SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>stypesafe.author.username</code>
	 */
	public final TableField<AuthorRecord, String> USERNAME = createField("username", SQLDataType.VARCHAR, this);

	public Author() {
		super("author", Stypesafe.STYPESAFE);
	}

	public Author(String alias) {
		super(alias, Stypesafe.STYPESAFE, Author.AUTHOR);
	}

	@Override
	public Identity<AuthorRecord, UInteger> getIdentity() {
		return Keys.IDENTITY_AUTHOR;
	}

	@Override
	public UniqueKey<AuthorRecord> getMainKey() {
		return Keys.KEY_AUTHOR_PRIMARY;
	}

	@Override
	@SuppressWarnings("unchecked")
	public java.util.List<UniqueKey<AuthorRecord>> getKeys() {
		return java.util.Arrays.<UniqueKey<AuthorRecord>>asList(Keys.KEY_AUTHOR_PRIMARY);
	}

	@Override
	public Author as(String alias) {
		return new Author(alias);
	}
}
