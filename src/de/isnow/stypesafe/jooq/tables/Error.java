/**
 * This class is generated by jOOQ
 */
package de.isnow.stypesafe.jooq.tables;

import java.util.Arrays;
import java.util.List;

import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.UpdatableTableImpl;
import org.jooq.tools.unsigned.UInteger;

import de.isnow.stypesafe.jooq.Keys;
import de.isnow.stypesafe.jooq.Stypesafe;
import de.isnow.stypesafe.jooq.tables.records.ErrorRecord;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.4.2"},
                            comments = "This class is generated by jOOQ")
public class Error extends UpdatableTableImpl<ErrorRecord> {

	private static final long serialVersionUID = -1485269242;

	/**
	 * The singleton instance of stypesafe.error
	 */
	public static final Error ERROR = new Error();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ErrorRecord> getRecordType() {
		return ErrorRecord.class;
	}

	/**
	 * The table column <code>stypesafe.error.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public final TableField<ErrorRecord, UInteger> ID = createField("id", SQLDataType.INTEGERUNSIGNED, this);

	/**
	 * The table column <code>stypesafe.error.timestamp</code>
	 */
	public final TableField<ErrorRecord, java.sql.Timestamp> TIMESTAMP = createField("timestamp", SQLDataType.TIMESTAMP, this);

	/**
	 * The table column <code>stypesafe.error.error</code>
	 */
	public final TableField<ErrorRecord, String> ERROR_ = createField("error", SQLDataType.VARCHAR, this);

	public Error() {
		super("error", Stypesafe.STYPESAFE);
	}

	public Error(String alias) {
		super(alias, Stypesafe.STYPESAFE, Error.ERROR);
	}

	@Override
	public Identity<ErrorRecord, UInteger> getIdentity() {
		return Keys.IDENTITY_ERROR;
	}

	@Override
	public UniqueKey<ErrorRecord> getMainKey() {
		return Keys.KEY_ERROR_PRIMARY;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<UniqueKey<ErrorRecord>> getKeys() {
		return Arrays.<UniqueKey<ErrorRecord>>asList(Keys.KEY_ERROR_PRIMARY);
	}

	@Override
	public Error as(String alias) {
		return new Error(alias);
	}
}
