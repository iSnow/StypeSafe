/**
 * This class is generated by jOOQ
 */
package de.isnow.stypesafe.jooq.tables.records;

import java.sql.Timestamp;

import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.tools.unsigned.UInteger;
import org.jooq.tools.unsigned.Unsigned;

import de.isnow.stypesafe.jooq.tables.Document;
import de.isnow.stypesafe.jooq.tables.Documentfragment;
import de.isnow.stypesafe.jooq.tables.Documentversion;
import de.isnow.stypi.data.StypiDocumentVersion;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.4.2"},
                            comments = "This class is generated by jOOQ")
public class DocumentversionRecord extends UpdatableRecordImpl<DocumentversionRecord> {
	private static final long serialVersionUID = 1035727980;
	
	public DocumentversionRecord() {
		super(Documentversion.DOCUMENTVERSION);
	}

	public DocumentversionRecord(StypiDocumentVersion v, UInteger documentId) {
		super(Documentversion.DOCUMENTVERSION);
		this.setFkDocument(documentId);
		this.setVersion( Unsigned.uint (v.version));
	}

	/**
	 * The table column <code>stypesafe.documentversion.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public void setId(UInteger value) {
		setValue(Documentversion.DOCUMENTVERSION.ID, value);
	}

	/**
	 * The table column <code>stypesafe.documentversion.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public UInteger getId() {
		return getValue(Documentversion.DOCUMENTVERSION.ID);
	}

	/**
	 * The table column <code>stypesafe.documentversion.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public java.util.List<DocumentfragmentRecord> fetchDocumentfragmentList() {
		return create()
			.selectFrom(Documentfragment.DOCUMENTFRAGMENT)
			.where(Documentfragment.DOCUMENTFRAGMENT.FK_VERSION.equal(getValue(Documentversion.DOCUMENTVERSION.ID)))
			.fetch();
	}

	/**
	 * The table column <code>stypesafe.documentversion.fk_document</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT document_version
	 * FOREIGN KEY (fk_document)
	 * REFERENCES stypesafe.document (id)
	 * </pre></code>
	 */
	public void setFkDocument(UInteger value) {
		setValue(Documentversion.DOCUMENTVERSION.FK_DOCUMENT, value);
	}

	/**
	 * The table column <code>stypesafe.documentversion.fk_document</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT document_version
	 * FOREIGN KEY (fk_document)
	 * REFERENCES stypesafe.document (id)
	 * </pre></code>
	 */
	public UInteger getFkDocument() {
		return getValue(Documentversion.DOCUMENTVERSION.FK_DOCUMENT);
	}

	/**
	 * Link this record to a given {@link DocumentRecord 
	 * DocumentRecord}
	 */
	public void setFkDocument(DocumentRecord value) {
		if (value == null) {
			setValue(Documentversion.DOCUMENTVERSION.FK_DOCUMENT, null);
		}
		else {
			setValue(Documentversion.DOCUMENTVERSION.FK_DOCUMENT, value.getValue(Document.DOCUMENT.ID));
		}
	}

	/**
	 * The table column <code>stypesafe.documentversion.fk_document</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT document_version
	 * FOREIGN KEY (fk_document)
	 * REFERENCES stypesafe.document (id)
	 * </pre></code>
	 */
	public DocumentRecord fetchDocument() {
		return create()
			.selectFrom(Document.DOCUMENT)
			.where(Document.DOCUMENT.ID.equal(getValue(Documentversion.DOCUMENTVERSION.FK_DOCUMENT)))
			.fetchOne();
	}

	/**
	 * The table column <code>stypesafe.documentversion.version</code>
	 */
	public void setVersion(UInteger value) {
		setValue(Documentversion.DOCUMENTVERSION.VERSION, value);
	}

	/**
	 * The table column <code>stypesafe.documentversion.version</code>
	 */
	public UInteger getVersion() {
		return getValue(Documentversion.DOCUMENTVERSION.VERSION);
	}

	/**
	 * The table column <code>stypesafe.documentversion.timestamp</code>
	 */
	public void setTimestamp(Timestamp value) {
		setValue(Documentversion.DOCUMENTVERSION.TIMESTAMP, value);
	}

	/**
	 * The table column <code>stypesafe.documentversion.timestamp</code>
	 */
	public Timestamp getTimestamp() {
		return getValue(Documentversion.DOCUMENTVERSION.TIMESTAMP);
	}
}
