/**
 * This class is generated by jOOQ
 */
package de.isnow.stypesafe.jooq.tables.records;

import org.jooq.InsertSetMoreStep;
import org.jooq.InsertSetStep;

import de.isnow.stypesafe.jooq.tables.Documentversion;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.5.1"},
                            comments = "This class is generated by jOOQ")
public class DocumentversionRecord extends org.jooq.impl.UpdatableRecordImpl<de.isnow.stypesafe.jooq.tables.records.DocumentversionRecord> {

	private static final long serialVersionUID = -1296131665;

	/**
	 * The table column <code>stypesafe.documentversion.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public void setId(org.jooq.tools.unsigned.UInteger value) {
		setValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.ID, value);
	}

	/**
	 * The table column <code>stypesafe.documentversion.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public org.jooq.tools.unsigned.UInteger getId() {
		return getValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.ID);
	}

	/**
	 * The table column <code>stypesafe.documentversion.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public java.util.List<de.isnow.stypesafe.jooq.tables.records.FragmentxversionRecord> fetchFragmentxversionList() {
		return create()
			.selectFrom(de.isnow.stypesafe.jooq.tables.Fragmentxversion.FRAGMENTXVERSION)
			.where(de.isnow.stypesafe.jooq.tables.Fragmentxversion.FRAGMENTXVERSION.FK_DOCUMENTVERSION.equal(getValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.ID)))
			.fetch();
	}

	/**
	 * The table column <code>stypesafe.documentversion.fk_document</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT document_version
	 * FOREIGN KEY (fk_document)
	 * REFERENCES stypesafe.document (id)
	 * </pre></code>
	 */
	public void setFkDocument(org.jooq.tools.unsigned.UInteger value) {
		setValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.FK_DOCUMENT, value);
	}

	/**
	 * The table column <code>stypesafe.documentversion.fk_document</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT document_version
	 * FOREIGN KEY (fk_document)
	 * REFERENCES stypesafe.document (id)
	 * </pre></code>
	 */
	public org.jooq.tools.unsigned.UInteger getFkDocument() {
		return getValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.FK_DOCUMENT);
	}

	/**
	 * Link this record to a given {@link de.isnow.stypesafe.jooq.tables.records.DocumentRecord 
	 * DocumentRecord}
	 */
	public void setFkDocument(de.isnow.stypesafe.jooq.tables.records.DocumentRecord value) {
		if (value == null) {
			setValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.FK_DOCUMENT, null);
		}
		else {
			setValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.FK_DOCUMENT, value.getValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.ID));
		}
	}

	/**
	 * The table column <code>stypesafe.documentversion.fk_document</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT document_version
	 * FOREIGN KEY (fk_document)
	 * REFERENCES stypesafe.document (id)
	 * </pre></code>
	 */
	public de.isnow.stypesafe.jooq.tables.records.DocumentRecord fetchDocument() {
		return create()
			.selectFrom(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT)
			.where(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.ID.equal(getValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.FK_DOCUMENT)))
			.fetchOne();
	}

	/**
	 * The table column <code>stypesafe.documentversion.version</code>
	 */
	public void setVersion(org.jooq.tools.unsigned.UInteger value) {
		setValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.VERSION, value);
	}

	/**
	 * The table column <code>stypesafe.documentversion.version</code>
	 */
	public org.jooq.tools.unsigned.UInteger getVersion() {
		return getValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.VERSION);
	}

	/**
	 * The table column <code>stypesafe.documentversion.timestamp</code>
	 */
	public void setTimestamp(java.sql.Timestamp value) {
		setValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.TIMESTAMP, value);
	}

	/**
	 * The table column <code>stypesafe.documentversion.timestamp</code>
	 */
	public java.sql.Timestamp getTimestamp() {
		return getValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.TIMESTAMP);
	}

	/**
	 * The table column <code>stypesafe.documentversion.fingerprint</code>
	 */
	public void setFingerprint(java.lang.String value) {
		setValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.FINGERPRINT, value);
	}

	/**
	 * The table column <code>stypesafe.documentversion.fingerprint</code>
	 */
	public java.lang.String getFingerprint() {
		return getValue(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.FINGERPRINT);
	}
	
	public InsertSetMoreStep<DocumentversionRecord> prepareInsert(InsertSetStep<DocumentversionRecord> s) {
		s.set(Documentversion.DOCUMENTVERSION.FK_DOCUMENT, this.getFkDocument());
		s.set(Documentversion.DOCUMENTVERSION.FINGERPRINT, this.getFingerprint());
		return s.set(Documentversion.DOCUMENTVERSION.VERSION, this.getVersion());
	}

	/**
	 * Create a detached DocumentversionRecord
	 */
	public DocumentversionRecord() {
		super(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION);
	}
}
