/**
 * This class is generated by jOOQ
 */
package de.isnow.stypesafe.jooq.tables.records;

import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.tools.unsigned.UInteger;

import de.isnow.stypesafe.jooq.tables.Author;
import de.isnow.stypesafe.jooq.tables.Documentfragment;
import de.isnow.stypesafe.jooq.tables.Documentversion;

/** 
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.4.2"},
                            comments = "This class is generated by jOOQ")
public class DocumentfragmentRecord extends UpdatableRecordImpl<DocumentfragmentRecord> {

	private static final long serialVersionUID = 1229072767;

	/**
	 * The table column <code>stypesafe.documentfragment.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public void setId(UInteger value) {
		setValue(Documentfragment.DOCUMENTFRAGMENT.ID, value);
	}

	/**
	 * The table column <code>stypesafe.documentfragment.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public UInteger getId() {
		return getValue(Documentfragment.DOCUMENTFRAGMENT.ID);
	}

	/**
	 * The table column <code>stypesafe.documentfragment.text</code>
	 */
	public void setText(java.lang.String value) {
		setValue(Documentfragment.DOCUMENTFRAGMENT.TEXT, value);
	}

	/**
	 * The table column <code>stypesafe.documentfragment.text</code>
	 */
	public java.lang.String getText() {
		return getValue(Documentfragment.DOCUMENTFRAGMENT.TEXT);
	}

	/**
	 * The table column <code>stypesafe.documentfragment.fk_version</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT fragment_version
	 * FOREIGN KEY (fk_version)
	 * REFERENCES stypesafe.documentversion (id)
	 * </pre></code>
	 */
	public void setFkVersion(UInteger value) {
		setValue(Documentfragment.DOCUMENTFRAGMENT.FK_VERSION, value);
	}

	/**
	 * The table column <code>stypesafe.documentfragment.fk_version</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT fragment_version
	 * FOREIGN KEY (fk_version)
	 * REFERENCES stypesafe.documentversion (id)
	 * </pre></code>
	 */
	public UInteger getFkVersion() {
		return getValue(Documentfragment.DOCUMENTFRAGMENT.FK_VERSION);
	}

	/**
	 * Link this record to a given {@link DocumentversionRecord 
	 * DocumentversionRecord}
	 */
	public void setFkVersion(DocumentversionRecord value) {
		if (value == null) {
			setValue(Documentfragment.DOCUMENTFRAGMENT.FK_VERSION, null);
		}
		else {
			setValue(Documentfragment.DOCUMENTFRAGMENT.FK_VERSION, value.getValue(Documentversion.DOCUMENTVERSION.ID));
		}
	}

	/**
	 * The table column <code>stypesafe.documentfragment.fk_version</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT fragment_version
	 * FOREIGN KEY (fk_version)
	 * REFERENCES stypesafe.documentversion (id)
	 * </pre></code>
	 */
	public DocumentversionRecord fetchDocumentversion() {
		return create()
			.selectFrom(Documentversion.DOCUMENTVERSION)
			.where(Documentversion.DOCUMENTVERSION.ID.equal(getValue(Documentfragment.DOCUMENTFRAGMENT.FK_VERSION)))
			.fetchOne();
	}

	/**
	 * The table column <code>stypesafe.documentfragment.fk_author</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT fragment_author
	 * FOREIGN KEY (fk_author)
	 * REFERENCES stypesafe.author (id)
	 * </pre></code>
	 */
	public void setFkAuthor(UInteger value) {
		setValue(Documentfragment.DOCUMENTFRAGMENT.FK_AUTHOR, value);
	}

	/**
	 * The table column <code>stypesafe.documentfragment.fk_author</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT fragment_author
	 * FOREIGN KEY (fk_author)
	 * REFERENCES stypesafe.author (id)
	 * </pre></code>
	 */
	public UInteger getFkAuthor() {
		return getValue(Documentfragment.DOCUMENTFRAGMENT.FK_AUTHOR);
	}

	/**
	 * Link this record to a given {@link AuthorRecord 
	 * AuthorRecord}
	 */
	public void setFkAuthor(AuthorRecord value) {
		if (value == null) {
			setValue(Documentfragment.DOCUMENTFRAGMENT.FK_AUTHOR, null);
		}
		else {
			setValue(Documentfragment.DOCUMENTFRAGMENT.FK_AUTHOR, value.getValue(Author.AUTHOR.ID));
		}
	}

	/**
	 * The table column <code>stypesafe.documentfragment.fk_author</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT fragment_author
	 * FOREIGN KEY (fk_author)
	 * REFERENCES stypesafe.author (id)
	 * </pre></code>
	 */
	public AuthorRecord fetchAuthor() {
		return create()
			.selectFrom(Author.AUTHOR)
			.where(Author.AUTHOR.ID.equal(getValue(Documentfragment.DOCUMENTFRAGMENT.FK_AUTHOR)))
			.fetchOne();
	}

	/**
	 * Create a detached DocumentfragmentRecord
	 */
	public DocumentfragmentRecord() {
		super(Documentfragment.DOCUMENTFRAGMENT);
	}
}
