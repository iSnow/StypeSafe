/**
 * This class is generated by jOOQ
 */
package de.isnow.stypesafe.jooq.tables.records;

import java.util.List;

import org.jooq.InsertSetMoreStep;
import org.jooq.InsertSetStep;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.tools.unsigned.UInteger;

import de.isnow.stypesafe.jooq.tables.Document;
import de.isnow.stypesafe.jooq.tables.Documentversion;
import de.isnow.stypi.data.StypiDocument;

@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.4.2"},
                            comments = "This class is generated by jOOQ")
public class DocumentRecord extends UpdatableRecordImpl<DocumentRecord> implements Comparable<DocumentRecord>{
	private static final long serialVersionUID = -1009101156;
	
	/**
	 * Create a detached DocumentRecord
	 */
	public DocumentRecord() {
		super(Document.DOCUMENT);
	}
	
	public DocumentRecord (StypiDocument stypiDoc) {
		super(Document.DOCUMENT);
		this.setStypiuid(stypiDoc.stypiId);
		this.setTitle(stypiDoc.title);
		this.setUrl(stypiDoc.humanReadableUrl);
	}
	
	/**
	 * The table column <code>stypesafe.document.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public void setId(UInteger value) {
		setValue(Document.DOCUMENT.ID, value);
	}

	/**
	 * The table column <code>stypesafe.document.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public UInteger getId() {
		return getValue(Document.DOCUMENT.ID);
	}

	/**
	 * The table column <code>stypesafe.document.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public List<DocumentRecord> fetchHistory() {
		return create()
			.selectFrom(Document.DOCUMENT)
			.where(Document.DOCUMENT.BEFORE_RENAME.equal(getValue(Document.DOCUMENT.ID)))
			.fetch();
	}

	/**
	 * The table column <code>stypesafe.document.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public List<DocumentversionRecord> fetchVersions() {
		return create()
			.selectFrom(Documentversion.DOCUMENTVERSION)
			.where(Documentversion.DOCUMENTVERSION.FK_DOCUMENT.equal(getId()))
			.fetch();
	}

	/**
	 * The table column <code>stypesafe.document.stypiuid</code>
	 */
	public void setStypiuid(String value) {
		setValue(Document.DOCUMENT.STYPIUID, value);
	}

	/**
	 * The table column <code>stypesafe.document.stypiuid</code>
	 */
	public String getStypiuid() {
		return getValue(Document.DOCUMENT.STYPIUID);
	}

	/**
	 * The table column <code>stypesafe.document.url</code>
	 */
	public void setUrl(String value) {
		setValue(Document.DOCUMENT.URL, value);
	}

	/**
	 * The table column <code>stypesafe.document.url</code>
	 */
	public String getUrl() {
		return getValue(Document.DOCUMENT.URL);
	}

	/**
	 * The table column <code>stypesafe.document.title</code>
	 */
	public void setTitle(String value) {
		setValue(Document.DOCUMENT.TITLE, value);
	}

	/**
	 * The table column <code>stypesafe.document.title</code>
	 */
	public String getTitle() {
		return getValue(Document.DOCUMENT.TITLE);
	}

	public void setBeforeRename(UInteger value) {
		setValue(Document.DOCUMENT.BEFORE_RENAME, value);
	}

	
	public UInteger getBeforeRename() {
		return getValue(Document.DOCUMENT.BEFORE_RENAME);
	}

	/**
	 * Link this record to a given {@link DocumentRecord 
	 * DocumentRecord}
	 */
	public void setBeforeRename(DocumentRecord value) {
		if (value == null) {
			setValue(Document.DOCUMENT.BEFORE_RENAME, null);
		}
		else {
			setValue(Document.DOCUMENT.BEFORE_RENAME, value.getValue(Document.DOCUMENT.ID));
		}
	}
	
	public InsertSetMoreStep<DocumentRecord> prepareInsert (InsertSetStep<DocumentRecord> s) {
		s.set(Document.DOCUMENT.STYPIUID, this.getStypiuid());
		s.set(Document.DOCUMENT.URL, this.getUrl());
		return s.set(Document.DOCUMENT.TITLE, getTitle());
	}
	
	@Override
	public int compareTo(DocumentRecord arg0) {
		return this.getTitle().compareToIgnoreCase(arg0.getTitle());
	}

}
