/**
 * This class is generated by jOOQ
 */
package de.isnow.stypesafe.jooq.tables.records;

import org.jooq.InsertSetMoreStep;
import org.jooq.InsertSetStep;

import de.isnow.stypesafe.jooq.tables.Document;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.5.1"},
                            comments = "This class is generated by jOOQ")
public class DocumentRecord extends org.jooq.impl.UpdatableRecordImpl<de.isnow.stypesafe.jooq.tables.records.DocumentRecord> {

	private static final long serialVersionUID = -83019172;

	/**
	 * The table column <code>stypesafe.document.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public void setId(org.jooq.tools.unsigned.UInteger value) {
		setValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.ID, value);
	}

	/**
	 * The table column <code>stypesafe.document.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public org.jooq.tools.unsigned.UInteger getId() {
		return getValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.ID);
	}

	/**
	 * The table column <code>stypesafe.document.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public java.util.List<de.isnow.stypesafe.jooq.tables.records.DocumentRecord> fetchDocumentList() {
		return create()
			.selectFrom(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT)
			.where(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.BEFORE_RENAME.equal(getValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.ID)))
			.fetch();
	}

	/**
	 * The table column <code>stypesafe.document.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public java.util.List<de.isnow.stypesafe.jooq.tables.records.DocumentversionRecord> fetchDocumentversionList() {
		return create()
			.selectFrom(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION)
			.where(de.isnow.stypesafe.jooq.tables.Documentversion.DOCUMENTVERSION.FK_DOCUMENT.equal(getValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.ID)))
			.fetch();
	}

	/**
	 * The table column <code>stypesafe.document.stypiuid</code>
	 */
	public void setStypiuid(java.lang.String value) {
		setValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.STYPIUID, value);
	}

	/**
	 * The table column <code>stypesafe.document.stypiuid</code>
	 */
	public java.lang.String getStypiuid() {
		return getValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.STYPIUID);
	}

	/**
	 * The table column <code>stypesafe.document.url</code>
	 */
	public void setUrl(java.lang.String value) {
		setValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.URL, value);
	}

	/**
	 * The table column <code>stypesafe.document.url</code>
	 */
	public java.lang.String getUrl() {
		return getValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.URL);
	}

	/**
	 * The table column <code>stypesafe.document.title</code>
	 */
	public void setTitle(java.lang.String value) {
		setValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.TITLE, value);
	}

	/**
	 * The table column <code>stypesafe.document.title</code>
	 */
	public java.lang.String getTitle() {
		return getValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.TITLE);
	}

	/**
	 * The table column <code>stypesafe.document.before_rename</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT document_history
	 * FOREIGN KEY (before_rename)
	 * REFERENCES stypesafe.document (id)
	 * </pre></code>
	 */
	public void setBeforeRename(org.jooq.tools.unsigned.UInteger value) {
		setValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.BEFORE_RENAME, value);
	}

	/**
	 * The table column <code>stypesafe.document.before_rename</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT document_history
	 * FOREIGN KEY (before_rename)
	 * REFERENCES stypesafe.document (id)
	 * </pre></code>
	 */
	public org.jooq.tools.unsigned.UInteger getBeforeRename() {
		return getValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.BEFORE_RENAME);
	}

	/**
	 * Link this record to a given {@link de.isnow.stypesafe.jooq.tables.records.DocumentRecord 
	 * DocumentRecord}
	 */
	public void setBeforeRename(de.isnow.stypesafe.jooq.tables.records.DocumentRecord value) {
		if (value == null) {
			setValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.BEFORE_RENAME, null);
		}
		else {
			setValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.BEFORE_RENAME, value.getValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.ID));
		}
	}

	/**
	 * The table column <code>stypesafe.document.before_rename</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT document_history
	 * FOREIGN KEY (before_rename)
	 * REFERENCES stypesafe.document (id)
	 * </pre></code>
	 */
	public de.isnow.stypesafe.jooq.tables.records.DocumentRecord fetchDocument() {
		return create()
			.selectFrom(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT)
			.where(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.ID.equal(getValue(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT.BEFORE_RENAME)))
			.fetchOne();
	}
	
	public InsertSetMoreStep<DocumentRecord> prepareInsert (InsertSetStep<DocumentRecord> s) {
		s.set(Document.DOCUMENT.STYPIUID, this.getStypiuid());
		s.set(Document.DOCUMENT.URL, this.getUrl());
		return s.set(Document.DOCUMENT.TITLE, getTitle());
	}


	/**
	 * Create a detached DocumentRecord
	 */
	public DocumentRecord() {
		super(de.isnow.stypesafe.jooq.tables.Document.DOCUMENT);
	}
}
