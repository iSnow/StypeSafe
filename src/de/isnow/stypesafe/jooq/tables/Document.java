/**
 * This class is generated by jOOQ
 */
package de.isnow.stypesafe.jooq.tables;

import java.util.Arrays;
import java.util.List;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.UpdatableTableImpl;
import org.jooq.tools.unsigned.UInteger;

import de.isnow.stypesafe.jooq.Keys;
import de.isnow.stypesafe.jooq.Stypesafe;
import de.isnow.stypesafe.jooq.tables.records.DocumentRecord;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.4.2"},
                            comments = "This class is generated by jOOQ")
public class Document extends UpdatableTableImpl<DocumentRecord> {

	private static final long serialVersionUID = 916282373;

	/**
	 * The singleton instance of stypesafe.document
	 */
	public static final Document DOCUMENT = new Document();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<DocumentRecord> getRecordType() {
		return DocumentRecord.class;
	}

	/**
	 * The table column <code>stypesafe.document.id</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public final TableField<DocumentRecord, UInteger> ID = createField("id", SQLDataType.INTEGERUNSIGNED, this);

	/**
	 * The table column <code>stypesafe.document.stypiuid</code>
	 */
	public final TableField<DocumentRecord, String> STYPIUID = createField("stypiuid", SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>stypesafe.document.url</code>
	 */
	public final TableField<DocumentRecord, String> URL = createField("url", SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>stypesafe.document.title</code>
	 */
	public final TableField<DocumentRecord, String> TITLE = createField("title", SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>stypesafe.document.before_rename</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT document_history
	 * FOREIGN KEY (before_rename)
	 * REFERENCES stypesafe.document (id)
	 * </pre></code>
	 */
	public final TableField<DocumentRecord, UInteger> BEFORE_RENAME = createField("before_rename", SQLDataType.INTEGERUNSIGNED, this);

	public Document() {
		super("document", Stypesafe.STYPESAFE);
	}

	public Document(String alias) {
		super(alias, Stypesafe.STYPESAFE, Document.DOCUMENT);
	}

	@Override
	public Identity<DocumentRecord, UInteger> getIdentity() {
		return Keys.IDENTITY_DOCUMENT;
	}

	@Override
	public UniqueKey<DocumentRecord> getMainKey() {
		return Keys.KEY_DOCUMENT_PRIMARY;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<UniqueKey<DocumentRecord>> getKeys() {
		return Arrays.<UniqueKey<DocumentRecord>>asList(Keys.KEY_DOCUMENT_PRIMARY);
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<ForeignKey<DocumentRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<DocumentRecord, ?>>asList(Keys.DOCUMENT_HISTORY);
	}

	@Override
	public Document as(String alias) {
		return new Document(alias);
	}
}
